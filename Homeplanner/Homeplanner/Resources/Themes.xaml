<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!-- 🌞 Light Mode Farben -->
    <Color x:Key="LightBackground">#FFFFFF</Color>
    <Color x:Key="LightForeground">#333333</Color>
    <Color x:Key="LightMenuBackground">#FFFFFF</Color>
    <Color x:Key="LightPrimaryColor">#1ABC9C</Color>

    <!-- 🌙 Dark Mode Farben -->
    <Color x:Key="DarkBackground">#2C2C2C</Color>
    <Color x:Key="DarkForeground">#DCDCDC</Color>
    <Color x:Key="DarkMenuBackground">#3A3A3A</Color>
    <Color x:Key="DarkPrimaryColorValue">#16A085</Color>
    <!-- Umbenannt, um Typ-Probleme zu vermeiden -->

    <!-- 🔄 Dynamische Brushes für Light/Dark Mode -->
    <SolidColorBrush x:Key="BackgroundColor" Color="{DynamicResource LightBackground}" />
    <SolidColorBrush x:Key="ForegroundColor" Color="{DynamicResource LightForeground}" />
    <SolidColorBrush x:Key="MenuBackground" Color="{DynamicResource LightMenuBackground}" />
    <SolidColorBrush x:Key="PrimaryColor" Color="{DynamicResource LightPrimaryColor}" />
    <SolidColorBrush x:Key="DarkPrimaryColor" Color="{DynamicResource DarkPrimaryColorValue}" />
    <!-- Umgewandelt in Brush -->

    <!-- 📌 Border-Style für Karten -->
    <Style x:Key="CardStyle" TargetType="Border">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Padding" Value="15"/>
        <Setter Property="CornerRadius" Value="12"/>
        <Setter Property="BorderBrush" Value="Gray"/>
        <Setter Property="BorderThickness" Value="1"/>
    </Style>

    <!-- 🎨 Menübutton-Style -->
    <Style x:Key="MenuButtonStyle" TargetType="Button">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{DynamicResource ForegroundColor}"/>
        <Setter Property="FontSize" Value="18"/>
        <Setter Property="Padding" Value="10"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Margin" Value="5"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border Background="{TemplateBinding Background}" Padding="10">
                        <ContentPresenter HorizontalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource PrimaryColor}"/>
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource DarkPrimaryColor}"/>
                <!-- Jetzt kompatibel -->
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- ✅ Moderner CheckBox-Style mit funktionierendem Haken -->
    <Style x:Key="ModernCheckBoxStyle" TargetType="CheckBox">
        <Setter Property="Cursor" Value="Hand"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <StackPanel Orientation="Horizontal" VerticalAlignment="Center">
                        <!-- Checkbox-Rahmen -->
                        <Border x:Name="CheckBoxBorder"
                            Width="22" Height="22" CornerRadius="4"
                            BorderBrush="Gray" BorderThickness="2"
                            Background="{DynamicResource BackgroundColor}">
                            <Grid>
                                <!-- Haken -->
                                <Path x:Name="CheckMark"
                                  Data="M 4,12 L 9,18 L 18,6"
                                  Stroke="{DynamicResource ForegroundColor}"
                                  StrokeThickness="3"
                                  StrokeDashCap="Round"
                                  Visibility="Collapsed"/>
                            </Grid>
                        </Border>
                        <!-- Label -->
                        <TextBlock Text="{TemplateBinding Content}"
                               FontSize="16" Foreground="{DynamicResource ForegroundColor}"
                               Margin="10,0,0,0" VerticalAlignment="Center"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <!-- Wenn Checked = True, zeige Haken -->
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="CheckBoxBorder" Property="Background" Value="{DynamicResource PrimaryColor}"/>
                        </Trigger>
                        <!-- Hover Effekt -->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="CheckBoxBorder" Property="Background" Value="#D3D3D3"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>
